-- VUI Module Standardization Utility
-- Helps convert existing modules to the new standardized format
local addonName, VUI = ...
-- Fallback for test environments
if not VUI then VUI = _G.VUI end

-- Create the Module Standardization Utility namespace
VUI.ModuleStandardizationUtility = {
    version = "1.0.0",
    author = "VUI Team",
    
    -- Tracking status
    processed = {},
    
    -- Standardization options
    options = {
        createBackups = true, -- Create backups of files before modifying
        overwriteExisting = false, -- Overwrite existing standardized files
        autoRegister = true, -- Auto-register modules with registry
        logLevel = 2 -- 0 = none, 1 = errors only, 2 = normal, 3 = verbose
    }
}

-- Utility reference
local Utility = VUI.ModuleStandardizationUtility

-- Log message with appropriate level
function Utility:Log(level, ...)
    if not self.options.logLevel or self.options.logLevel < level then
        return
    end
    
    if level == 1 then
        VUI:Print("|cFFFF0000[StandardizationUtility Error]|r", ...)
    elseif level == 2 then
        VUI:Print("|cFFFFCC00[StandardizationUtility]|r", ...)
    elseif level == 3 then
        VUI:Print("|cFF00AAFF[StandardizationUtility Debug]|r", ...)
    end
end

-- Template for standardized module initialization file
local INIT_TEMPLATE = [[-- Module Initialization for %s
-- Generated by VUI Module Standardization Utility v%s
local addonName, VUI = ...

-- Create module using template
local %s = VUI.ModuleTemplate:CreateNewModule("%s", {
    description = "%s",
    version = "%s",
    author = "%s",
    category = "%s"
})

-- Add to VUI table
VUI.%s = %s

-- Hook initialization
if VUI.HookInitialize then
    VUI:HookInitialize(function()
        %s:Initialize()
    end)
end
]]

-- Template for standardized module config file
local CONFIG_TEMPLATE = [[-- Module Configuration for %s
-- Generated by VUI Module Standardization Utility v%s
local addonName, VUI = ...

-- Local references
local moduleName = "%s"
local lowerName = moduleName:lower()
local module = VUI[moduleName]

-- Generate module configuration
local moduleConfig = VUI.ModuleConfigTemplate:GenerateDefaultConfig(moduleName, {
    displayName = "%s",
    description = "%s",
    showScale = %s,
    showTheme = %s,
    showResetPositions = %s,
    showResetSettings = %s,
    defaults = {
        enabled = true,
        theme = "thunderstorm",
        scale = 1.0,
        settings = {
            -- Module-specific settings with defaults
%s
        }
    },
    settings = {
        -- Custom settings controls
%s
    }
})

-- Add to options panel
if VUI.options and VUI.options.args then
    VUI.options.args[moduleName] = moduleConfig
end
]]

-- Template for standardized module core file
local CORE_TEMPLATE = [[-- Module Core Implementation for %s
-- Generated by VUI Module Standardization Utility v%s
local addonName, VUI = ...

-- Local references
local moduleName = "%s"
local module = VUI[moduleName]

-- Initialize module
function module:Initialize()
    -- Set up default settings if needed
    if not VUI.db.profile.modules[moduleName:lower()] then
        VUI.db.profile.modules[moduleName:lower()] = {}
    end
    
    -- Check enabled state
    if VUI.db.profile.modules[moduleName:lower()].enabled == nil then
        VUI.db.profile.modules[moduleName:lower()].enabled = true
    end
    
    -- Initialize module-specific functionality
    self:SetupFrames()
    
    -- Register events
    self:RegisterEvents({
        "PLAYER_ENTERING_WORLD"
    })
    
    -- Apply current theme
    self:ApplyTheme(VUI.db.profile.theme or "thunderstorm")
    
    -- Register callbacks
    self:RegisterCallback("ThemeChanged", "ApplyTheme")
    
    -- Enable if set in profile
    if VUI.db.profile.modules[moduleName:lower()].enabled then
        self:Enable()
    end
    
    self:Log(2, "Module initialized")
end

-- Set up frames and UI elements
function module:SetupFrames()
    -- Create main module frame
    if not self.frame then
        self.frame = CreateFrame("Frame", "VUI" .. moduleName .. "Frame", UIParent, "BackdropTemplate")
        self.frame:SetSize(300, 200)
        self.frame:SetPoint("CENTER", UIParent, "CENTER", 0, 0)
        self.frame:SetBackdrop({
            bgFile = "Interface\\AddOns\\VUI\\media\\textures\\common\\background-solid.tga",
            edgeFile = "Interface\\AddOns\\VUI\\media\\textures\\common\\border-simple.tga",
            tile = false,
            tileSize = 0,
            edgeSize = 12,
            insets = { left = 3, right = 3, top = 3, bottom = 3 }
        })
        self.frame:SetBackdropColor(0.1, 0.1, 0.1, 0.8)
        self.frame:SetBackdropBorderColor(0.3, 0.3, 0.3, 0.8)
        self.frame:Hide()
    end
    
    -- Initialize module-specific elements here
    -- ...
end

-- Enable module
function module:Enable()
    self.enabled = true
    
    -- Handle module-specific enable logic
    -- ...
    
    self:Log(2, "Module enabled")
end

-- Disable module
function module:Disable()
    self.enabled = false
    
    -- Handle module-specific disable logic
    -- ...
    
    -- Hide frames
    if self.frame then
        self.frame:Hide()
    end
    
    self:Log(2, "Module disabled")
end

-- Apply theme
function module:ApplyTheme(theme)
    if not self.enabled then return end
    
    -- Get theme colors or use default theme
    local activeTheme = theme or VUI.db.profile.theme or "thunderstorm"
    local colors = VUI.media.themes[activeTheme]
    
    -- Apply theme to main frame
    if self.frame then
        self.frame:SetBackdropColor(colors.background.r, colors.background.g, colors.background.b, colors.background.a)
        self.frame:SetBackdropBorderColor(colors.border.r, colors.border.g, colors.border.b, colors.border.a)
    end
    
    -- Apply theme to other elements
    -- ...
    
    self:Log(3, "Applied theme: " .. activeTheme)
end

-- Event handlers
function module:PLAYER_ENTERING_WORLD()
    -- Handle PLAYER_ENTERING_WORLD event
    self:Log(3, "Player entered world")
    
    -- Update any necessary elements
    -- ...
end

-- Update module scale
function module:UpdateScale()
    if not self.enabled then return end
    
    -- Get scale value
    local scale = VUI.db.profile.modules[moduleName:lower()].scale or 1.0
    
    -- Apply scale to frames
    if self.frame then
        self.frame:SetScale(scale)
    end
    
    self:Log(3, "Updated scale: " .. scale)
end

-- Reset positions
function module:ResetPositions()
    -- Reset frame positions
    if self.frame then
        self.frame:ClearAllPoints()
        self.frame:SetPoint("CENTER", UIParent, "CENTER", 0, 0)
    end
    
    self:Log(2, "Reset frame positions")
end

-- Additional module-specific methods
-- ...
]]

-- Template for standardized module index.xml file
local INDEX_XML_TEMPLATE = [[<Ui xmlns="http://www.blizzard.com/wow/ui/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.blizzard.com/wow/ui/
..\FrameXML\UI.xsd">
    <Script file="init.lua"/>
    <Script file="config.lua"/>
    <Script file="core.lua"/>
</Ui>]]

-- Generate standardized init.lua file for a module
function Utility:GenerateInitFile(moduleName, moduleInfo)
    -- Get module info
    local info = moduleInfo or {}
    
    -- Default values
    local description = info.description or "VUI module: " .. moduleName
    local version = info.version or "1.0.0"
    local author = info.author or "VUI Team"
    local category = info.category or "Uncategorized"
    
    -- Generate file content
    local content = string.format(
        INIT_TEMPLATE,
        moduleName,
        self.version,
        moduleName,
        moduleName,
        description,
        version,
        author,
        category,
        moduleName,
        moduleName,
        moduleName
    )
    
    return content
end

-- Generate standardized config.lua file for a module
function Utility:GenerateConfigFile(moduleName, moduleInfo)
    -- Get module info
    local info = moduleInfo or {}
    
    -- Default values
    local displayName = info.displayName or moduleName
    local description = info.description or "Configuration for the " .. moduleName .. " module."
    
    -- Feature flags
    local showScale = info.showScale ~= nil and tostring(info.showScale) or "true"
    local showTheme = info.showTheme ~= nil and tostring(info.showTheme) or "true"
    local showResetPositions = info.showResetPositions ~= nil and tostring(info.showResetPositions) or "true"
    local showResetSettings = info.showResetSettings ~= nil and tostring(info.showResetSettings) or "true"
    
    -- Default settings
    local settingsStr = ""
    local settings = info.settings or {}
    
    -- Build settings table
    for key, value in pairs(settings) do
        local valueStr = type(value) == "string" and '"' .. value .. '"' or tostring(value)
        settingsStr = settingsStr .. string.format("            %s = %s,\n", key, valueStr)
    end
    
    if settingsStr == "" then
        settingsStr = "            -- Add module-specific settings here\n"
    end
    
    -- Build config controls
    local controlsStr = ""
    local controls = info.controls or {}
    
    -- Build controls
    for key, control in pairs(controls) do
        controlsStr = controlsStr .. string.format("        %s = {\n", key)
        controlsStr = controlsStr .. string.format("            order = %d,\n", control.order or 1)
        controlsStr = controlsStr .. string.format("            type = \"%s\",\n", control.type or "toggle")
        controlsStr = controlsStr .. string.format("            name = \"%s\",\n", control.name or key)
        
        if control.desc then
            controlsStr = controlsStr .. string.format("            desc = \"%s\",\n", control.desc)
        end
        
        if control.type == "range" then
            controlsStr = controlsStr .. string.format("            min = %s,\n", control.min or 0)
            controlsStr = controlsStr .. string.format("            max = %s,\n", control.max or 1)
            controlsStr = controlsStr .. string.format("            step = %s,\n", control.step or 0.1)
        end
        
        -- Add standard get function
        controlsStr = controlsStr .. "            get = function() return VUI.db.profile.modules[lowerName].settings." .. key .. " or " .. tostring(settings[key] or "false") .. " end,\n"
        
        -- Add standard set function
        controlsStr = controlsStr .. "            set = function(_, value)\n"
        controlsStr = controlsStr .. "                VUI.db.profile.modules[lowerName].settings." .. key .. " = value\n"
        
        if control.callback then
            controlsStr = controlsStr .. "                if module." .. control.callback .. " then\n"
            controlsStr = controlsStr .. "                    module:" .. control.callback .. "()\n"
            controlsStr = controlsStr .. "                end\n"
        end
        
        controlsStr = controlsStr .. "            end\n"
        controlsStr = controlsStr .. "        },\n"
    end
    
    if controlsStr == "" then
        controlsStr = "        -- Add custom settings controls here\n"
    end
    
    -- Generate file content
    local content = string.format(
        CONFIG_TEMPLATE,
        moduleName,
        self.version,
        moduleName,
        displayName,
        description,
        showScale,
        showTheme,
        showResetPositions,
        showResetSettings,
        settingsStr,
        controlsStr
    )
    
    return content
end

-- Generate standardized core.lua file for a module
function Utility:GenerateCoreFile(moduleName, moduleInfo)
    -- Get module info
    local info = moduleInfo or {}
    
    -- Generate file content
    local content = string.format(
        CORE_TEMPLATE,
        moduleName,
        self.version,
        moduleName
    )
    
    return content
end

-- Generate standardized index.xml file for a module
function Utility:GenerateIndexXML()
    return INDEX_XML_TEMPLATE
end

-- Create a standardized module file structure
function Utility:CreateStandardizedModule(moduleName, moduleInfo)
    if not moduleName then
        self:Log(1, "Cannot create module without a name")
        return false
    end
    
    -- Get module info from registry if available
    local info = moduleInfo or {}
    
    if VUI.ModuleRegistry and VUI.ModuleRegistry:IsModuleRegistered(moduleName) then
        info = VUI.ModuleRegistry:GetModuleMetadata(moduleName) or info
    end
    
    -- Determine module directory path
    local modulePath = "modules/" .. moduleName:lower()
    
    -- Check if directory exists
    local success = os.execute("test -d " .. modulePath)
    
    if success ~= 0 then
        -- Create directory if it doesn't exist
        success = os.execute("mkdir -p " .. modulePath)
        
        if success ~= 0 then
            self:Log(1, "Failed to create directory:", modulePath)
            return false
        end
    end
    
    -- Generate files
    local initFile = modulePath .. "/init.lua"
    local configFile = modulePath .. "/config.lua"
    local coreFile = modulePath .. "/core.lua"
    local indexFile = modulePath .. "/index.xml"
    
    -- Check if files already exist and create backups if needed
    local function backupIfNeeded(filePath)
        if self.options.createBackups then
            if io.open(filePath, "r") then
                os.execute("cp " .. filePath .. " " .. filePath .. ".bak")
                self:Log(2, "Created backup of", filePath)
            end
        end
    end
    
    -- Create or overwrite files
    local function writeFile(filePath, content)
        -- Check if file exists and should be overwritten
        local exists = io.open(filePath, "r") ~= nil
        
        if exists and not self.options.overwriteExisting then
            self:Log(2, "File exists and overwrite is disabled:", filePath)
            return false
        end
        
        -- Create backup if needed
        backupIfNeeded(filePath)
        
        -- Write file
        local file = io.open(filePath, "w")
        if file then
            file:write(content)
            file:close()
            self:Log(2, "Created file:", filePath)
            return true
        else
            self:Log(1, "Failed to write file:", filePath)
            return false
        end
    end
    
    -- Write all files
    local initContent = self:GenerateInitFile(moduleName, info)
    local configContent = self:GenerateConfigFile(moduleName, info)
    local coreContent = self:GenerateCoreFile(moduleName, info)
    local indexContent = self:GenerateIndexXML()
    
    local initSuccess = writeFile(initFile, initContent)
    local configSuccess = writeFile(configFile, configContent)
    local coreSuccess = writeFile(coreFile, coreContent)
    local indexSuccess = writeFile(indexFile, indexContent)
    
    -- Check if all files were created successfully
    if initSuccess and configSuccess and coreSuccess and indexSuccess then
        self:Log(2, "Successfully created standardized module:", moduleName)
        
        -- Register with module registry if available
        if self.options.autoRegister and VUI.ModuleRegistry and not VUI.ModuleRegistry:IsModuleRegistered(moduleName) then
            self:Log(2, "Auto-registering module with registry:", moduleName)
            
            -- Create metadata
            local metadata = {
                name = moduleName,
                description = info.description or "VUI module: " .. moduleName,
                version = info.version or "1.0.0",
                author = info.author or "VUI Team",
                category = info.category or "Uncategorized"
            }
            
            -- Register with registry
            VUI.ModuleRegistry:RegisterModule(moduleName, metadata)
        end
        
        return true
    else
        self:Log(1, "Failed to create some files for module:", moduleName)
        return false
    end
end

-- Convert an existing module to standardized format
function Utility:ConvertExistingModule(moduleName)
    if not moduleName then
        self:Log(1, "Cannot convert module without a name")
        return false
    end
    
    -- Check if module exists
    if not VUI[moduleName] then
        self:Log(1, "Module does not exist in VUI table:", moduleName)
        return false
    end
    
    local module = VUI[moduleName]
    
    -- Extract module information
    local info = {
        description = module.description or "VUI module: " .. moduleName,
        version = module.version or "1.0.0",
        author = module.author or "VUI Team",
        category = self:DetermineModuleCategory(moduleName, module),
        settings = {}
    }
    
    -- Extract settings if available
    if VUI.db and VUI.db.profile and VUI.db.profile.modules and VUI.db.profile.modules[moduleName:lower()] then
        -- Clone settings
        local settings = VUI.db.profile.modules[moduleName:lower()].settings or {}
        
        for k, v in pairs(settings) do
            if type(v) ~= "table" then
                info.settings[k] = v
            end
        end
    end
    
    -- Create controls based on settings
    info.controls = {}
    
    for key, value in pairs(info.settings) do
        local control = {
            order = #info.controls + 1,
            name = key:gsub("^%l", string.upper):gsub("([A-Z])", " %1"):sub(2),
            desc = "Configure " .. key .. " setting"
        }
        
        -- Determine control type based on value type
        if type(value) == "boolean" then
            control.type = "toggle"
        elseif type(value) == "number" then
            control.type = "range"
            
            -- Set appropriate min/max/step
            if value <= 1 and value >= 0 then
                -- Probably a percentage or opacity
                control.min = 0
                control.max = 1
                control.step = 0.01
            else
                -- Probably a pixel value or other number
                control.min = 0
                control.max = value * 2
                control.step = 1
            end
        elseif type(value) == "string" then
            control.type = "input"
        end
        
        -- Try to guess callback method
        local callbackMethod = "Update" .. key:gsub("^%l", string.upper)
        
        if module[callbackMethod] and type(module[callbackMethod]) == "function" then
            control.callback = callbackMethod
        end
        
        info.controls[key] = control
    end
    
    -- Create standardized module
    return self:CreateStandardizedModule(moduleName, info)
end

-- Determine a module's category based on name or features
function Utility:DetermineModuleCategory(moduleName, module)
    -- Convert to lowercase for consistent matching
    local lowerName = moduleName:lower()
    
    -- Category detection based on name
    local categoryPatterns = {
        ["^unit"] = "UI",
        ["frame$"] = "UI",
        ["bar[s]?$"] = "UI",
        ["^skin"] = "Visuals",
        ["skin$"] = "Visuals",
        ["color"] = "Visuals",
        ["^tooltip"] = "UI",
        ["^chat"] = "UI",
        ["^config"] = "Core",
        ["^util"] = "Tools",
        ["^tool"] = "Tools",
        ["^integration"] = "Core",
        ["^performance"] = "Core",
        ["notification"] = "Visuals",
        ["^buff"] = "Visuals",
        ["^aura"] = "Visuals",
        ["^action"] = "UI",
        ["^bag"] = "UI",
        ["^inventory"] = "UI",
        ["^profile"] = "Tools",
        ["^map"] = "UI",
        ["^quest"] = "UI",
        ["^vendor"] = "Tools",
        ["^auction"] = "Addons",
        ["^movable"] = "UI",
        ["^combat"] = "Tools"
    }
    
    -- Check each pattern
    for pattern, category in pairs(categoryPatterns) do
        if lowerName:match(pattern) then
            return category
        end
    end
    
    -- Check module directory (for embedded addons)
    if VUI.ModuleRegistry and VUI.ModuleRegistry.modules then
        for name, metadata in pairs(VUI.ModuleRegistry.modules) do
            local modName = name:lower()
            if lowerName:match(modName) and metadata.category then
                return metadata.category
            end
        end
    end
    
    -- Default to Uncategorized
    return "Uncategorized"
end

-- Process all modules in VUI table
function Utility:ProcessAllModules()
    local count = 0
    local success = 0
    
    -- Process each module
    for name, module in pairs(VUI) do
        if type(module) == "table" and module.Initialize and type(name) == "string" and name ~= "ModuleStandardizationUtility" then
            count = count + 1
            
            if self:ConvertExistingModule(name) then
                success = success + 1
            end
        end
    end
    
    self:Log(2, "Processed " .. count .. " modules, successfully standardized " .. success)
    return success
end

-- Register with slash command handler
if VUI.RegisterSlashCommand then
    VUI:RegisterSlashCommand("standardize-utility", function(input)
        -- Parse input
        if input and input ~= "" then
            -- Convert specific module
            Utility:ConvertExistingModule(input)
        else
            -- Convert all modules
            Utility:ProcessAllModules()
        end
    end, "Convert modules to standardized format. Use 'standardize-utility ModuleName' for specific module.")
end